// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProcastinationKiller.Models;

namespace ProcastinationKiller.Migrations
{
    [DbContext(typeof(UsersContext))]
    [Migration("20191212170239_Friends")]
    partial class Friends
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ProcastinationKiller.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AcquiredDate");

                    b.Property<int?>("DefinitionId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.BadgeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AssignableFormBeggining");

                    b.Property<string>("Image");

                    b.HasKey("Id");

                    b.ToTable("BadgeDefinitions");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.BaseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("Hidden");

                    b.Property<int?>("Points");

                    b.Property<int?>("StateId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEvent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEvent");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FriendId");

                    b.Property<string>("FriendName");

                    b.Property<bool>("IsAccepted");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.FriendsInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accepted");

                    b.Property<DateTime>("AcceptedDate");

                    b.Property<string>("Icon");

                    b.Property<DateTime>("InvitationDate");

                    b.Property<string>("InviterId");

                    b.Property<string>("InviterName");

                    b.Property<bool>("Rejected");

                    b.Property<DateTime>("RejectedDate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FriendsInvitation");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("League");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentExp");

                    b.Property<int?>("DefinitionId");

                    b.Property<int>("Number");

                    b.Property<int>("RequiredExp");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.LevelDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LeagueId");

                    b.Property<int>("Number");

                    b.Property<int>("RequiredExp");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.MyInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InvitationDate");

                    b.Property<string>("InvitedId");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsRejected");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MyInvitation");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.RegistartionCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime?>("ConfirmationDate");

                    b.Property<bool>("IsConfirmed");

                    b.HasKey("Id");

                    b.ToTable("RegistartionCode");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.RewardCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int?>("BadgeDefinitionId");

                    b.Property<int?>("BadgeId");

                    b.Property<int>("Condition");

                    b.HasKey("Id");

                    b.HasIndex("BadgeDefinitionId");

                    b.HasIndex("BadgeId");

                    b.ToTable("RewardCondition");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completed");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("FinishTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Regdate");

                    b.Property<string>("TagString")
                        .IsRequired();

                    b.Property<DateTime>("TargetDate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CodeId");

                    b.Property<int?>("CurrentStateId");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<DateTime>("Regdate");

                    b.Property<string>("Token");

                    b.Property<string>("UId");

                    b.Property<int>("UserStatus");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("CurrentStateId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.UserState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentLoginStreak");

                    b.Property<int>("DailyLogins");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<int?>("LevelId");

                    b.Property<int>("LongestLoginStreak");

                    b.Property<int>("Points");

                    b.Property<int>("TotalTodosCompleted");

                    b.Property<int>("WeeklyLogins");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("UserState");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.DailyLoginEvent", b =>
                {
                    b.HasBaseType("ProcastinationKiller.Models.BaseEvent");


                    b.ToTable("DailyLoginEvent");

                    b.HasDiscriminator().HasValue("DailyLoginEvent");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.TodoCompletedEvent", b =>
                {
                    b.HasBaseType("ProcastinationKiller.Models.BaseEvent");

                    b.Property<int?>("CompletedItemId");

                    b.HasIndex("CompletedItemId");

                    b.ToTable("TodoCompletedEvent");

                    b.HasDiscriminator().HasValue("TodoCompletedEvent");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.WeeklyLoginEvent", b =>
                {
                    b.HasBaseType("ProcastinationKiller.Models.BaseEvent");


                    b.ToTable("WeeklyLoginEvent");

                    b.HasDiscriminator().HasValue("WeeklyLoginEvent");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.Badge", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.BadgeDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.BaseEvent", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.UserState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("ProcastinationKiller.Models.User")
                        .WithMany("Events")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.Friend", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.FriendsInvitation", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.User")
                        .WithMany("FriendsInvitations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.Level", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.LevelDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.LevelDefinition", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.MyInvitation", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.User")
                        .WithMany("MyInvitations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.RewardCondition", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.BadgeDefinition")
                        .WithMany("Conditions")
                        .HasForeignKey("BadgeDefinitionId");

                    b.HasOne("ProcastinationKiller.Models.Badge")
                        .WithMany("Conditions")
                        .HasForeignKey("BadgeId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.TodoItem", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.User")
                        .WithMany("UserTodos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.User", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.RegistartionCode", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId");

                    b.HasOne("ProcastinationKiller.Models.UserState", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentStateId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.UserState", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");
                });

            modelBuilder.Entity("ProcastinationKiller.Models.TodoCompletedEvent", b =>
                {
                    b.HasOne("ProcastinationKiller.Models.TodoItem", "CompletedItem")
                        .WithMany()
                        .HasForeignKey("CompletedItemId");
                });
#pragma warning restore 612, 618
        }
    }
}
